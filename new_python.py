import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import warnings
warnings.filterwarnings('ignore')

# 日本語フォント設定
plt.rcParams['font.family'] = 'DejaVu Sans'
sns.set_style("whitegrid")

class FrenchConsumerConfidenceAnalyzer:
    def __init__(self):
        """
        フランス家計信頼感指標分析クラス
        実際のデータを直接読み込み
        """
        self.load_data()
        self.processed_data = None
        
    def load_data(self):
        """
        実際のCSVデータを直接読み込み
        """
        # 実際の月次データ（2025年5月から1972年12月まで）
        periods = ['2025-05', '2025-04', '2025-03', '2025-02', '2025-01', '2024-12', '2024-11', '2024-10', '2024-09', '2024-08', '2024-07', '2024-06', '2024-05', '2024-04', '2024-03', '2024-02', '2024-01', '2023-12', '2023-11', '2023-10', '2023-09', '2023-08', '2023-07', '2023-06', '2023-05', '2023-04', '2023-03', '2023-02', '2023-01', '2022-12', '2022-11', '2022-10', '2022-09', '2022-08', '2022-07', '2022-06', '2022-05', '2022-04', '2022-03', '2022-02', '2022-01', '2021-12', '2021-11', '2021-10', '2021-09', '2021-08', '2021-07', '2021-06', '2021-05', '2021-04', '2021-03', '2021-02', '2021-01', '2020-12', '2020-11', '2020-10', '2020-09', '2020-08', '2020-07', '2020-06', '2020-05', '2020-04', '2020-03', '2020-02', '2020-01', '2019-12', '2019-11', '2019-10', '2019-09', '2019-08', '2019-07', '2019-06', '2019-05', '2019-04', '2019-03', '2019-02', '2019-01', '2018-12', '2018-11', '2018-10', '2018-09', '2018-08', '2018-07', '2018-06', '2018-05', '2018-04', '2018-03', '2018-02', '2018-01', '2017-12', '2017-11', '2017-10', '2017-09', '2017-08', '2017-07', '2017-06', '2017-05', '2017-04', '2017-03', '2017-02', '2017-01', '2016-12', '2016-11', '2016-10', '2016-09', '2016-08', '2016-07', '2016-06', '2016-05', '2016-04', '2016-03', '2016-02', '2016-01', '2015-12', '2015-11', '2015-10', '2015-09', '2015-08', '2015-07', '2015-06', '2015-05', '2015-04', '2015-03', '2015-02', '2015-01', '2014-12', '2014-11', '2014-10', '2014-09', '2014-08', '2014-07', '2014-06', '2014-05', '2014-04', '2014-03', '2014-02', '2014-01', '2013-12', '2013-11', '2013-10', '2013-09', '2013-08', '2013-07', '2013-06', '2013-05', '2013-04', '2013-03', '2013-02', '2013-01', '2012-12', '2012-11', '2012-10', '2012-09', '2012-08', '2012-07', '2012-06', '2012-05', '2012-04', '2012-03', '2012-02', '2012-01', '2011-12', '2011-11', '2011-10', '2011-09', '2011-08', '2011-07', '2011-06', '2011-05', '2011-04', '2011-03', '2011-02', '2011-01', '2010-12', '2010-11', '2010-10', '2010-09', '2010-08', '2010-07', '2010-06', '2010-05', '2010-04', '2010-03', '2010-02', '2010-01', '2009-12', '2009-11', '2009-10', '2009-09', '2009-08', '2009-07', '2009-06', '2009-05', '2009-04', '2009-03', '2009-02', '2009-01', '2008-12', '2008-11', '2008-10', '2008-09', '2008-08', '2008-07', '2008-06', '2008-05', '2008-04', '2008-03', '2008-02', '2008-01', '2007-12', '2007-11', '2007-10', '2007-09', '2007-08', '2007-07', '2007-06', '2007-05', '2007-04', '2007-03', '2007-02', '2007-01', '2006-12', '2006-11', '2006-10', '2006-09', '2006-08', '2006-07', '2006-06', '2006-05', '2006-04', '2006-03', '2006-02', '2006-01', '2005-12', '2005-11', '2005-10', '2005-09', '2005-08', '2005-07', '2005-06', '2005-05', '2005-04', '2005-03', '2005-02', '2005-01', '2004-12', '2004-11', '2004-10', '2004-09', '2004-08', '2004-07', '2004-06', '2004-05', '2004-04', '2004-03', '2004-02', '2004-01', '2003-12', '2003-11', '2003-10', '2003-09', '2003-08', '2003-07', '2003-06', '2003-05', '2003-04', '2003-03', '2003-02', '2003-01', '2002-12', '2002-11', '2002-10', '2002-09', '2002-08', '2002-07', '2002-06', '2002-05', '2002-04', '2002-03', '2002-02', '2002-01', '2001-12', '2001-11', '2001-10', '2001-09', '2001-08', '2001-07', '2001-06', '2001-05', '2001-04', '2001-03', '2001-02', '2001-01', '2000-12', '2000-11', '2000-10', '2000-09', '2000-08', '2000-07', '2000-06', '2000-05', '2000-04', '2000-03', '2000-02', '2000-01', '1999-12', '1999-11', '1999-10', '1999-09', '1999-08', '1999-07', '1999-06', '1999-05', '1999-04', '1999-03', '1999-02', '1999-01', '1998-12', '1998-11', '1998-10', '1998-09', '1998-08', '1998-07', '1998-06', '1998-05', '1998-04', '1998-03', '1998-02', '1998-01', '1997-12', '1997-11', '1997-10', '1997-09', '1997-08', '1997-07', '1997-06', '1997-05', '1997-04', '1997-03', '1997-02', '1997-01', '1996-12', '1996-11', '1996-10', '1996-09', '1996-08', '1996-07', '1996-06', '1996-05', '1996-04', '1996-03', '1996-02', '1996-01', '1995-12', '1995-11', '1995-10', '1995-09', '1995-08', '1995-07', '1995-06', '1995-05', '1995-04', '1995-03', '1995-02', '1995-01', '1994-12', '1994-11', '1994-10', '1994-09', '1994-08', '1994-07', '1994-06', '1994-05', '1994-04', '1994-03', '1994-02', '1994-01', '1993-12', '1993-11', '1993-10', '1993-09', '1993-08', '1993-07', '1993-06', '1993-05', '1993-04', '1993-03', '1993-02', '1993-01', '1992-12', '1992-11', '1992-10', '1992-09', '1992-08', '1992-07', '1992-06', '1992-05', '1992-04', '1992-03', '1992-02', '1992-01', '1991-12', '1991-11', '1991-10', '1991-09', '1991-08', '1991-07', '1991-06', '1991-05', '1991-04', '1991-03', '1991-02', '1991-01', '1990-12', '1990-11', '1990-10', '1990-09', '1990-08', '1990-07', '1990-06', '1990-05', '1990-04', '1990-03', '1990-02', '1990-01', '1989-12', '1989-11', '1989-10', '1989-09', '1989-08', '1989-07', '1989-06', '1989-05', '1989-04', '1989-03', '1989-02', '1989-01', '1988-12', '1988-11', '1988-10', '1988-09', '1988-08', '1988-07', '1988-06', '1988-05', '1988-04', '1988-03', '1988-02', '1988-01', '1987-12', '1987-11', '1987-10', '1987-09', '1987-08', '1987-07', '1987-06', '1987-05', '1987-04', '1987-03', '1987-02', '1987-01', '1986-12', '1986-11', '1986-10', '1986-09', '1986-08', '1986-07', '1986-06', '1986-05', '1986-04', '1986-03', '1986-02', '1986-01', '1985-12', '1985-11', '1985-10', '1985-09', '1985-08', '1985-07', '1985-06', '1985-05', '1985-04', '1985-03', '1985-02', '1985-01', '1984-12', '1984-11', '1984-10', '1984-09', '1984-08', '1984-07', '1984-06', '1984-05', '1984-04', '1984-03', '1984-02', '1984-01', '1983-12', '1983-11', '1983-10', '1983-09', '1983-08', '1983-07', '1983-06', '1983-05', '1983-04', '1983-03', '1983-02', '1983-01', '1982-12', '1982-11', '1982-10', '1982-09', '1982-08', '1982-07', '1982-06', '1982-05', '1982-04', '1982-03', '1982-02', '1982-01', '1981-12', '1981-11', '1981-10', '1981-09', '1981-08', '1981-07', '1981-06', '1981-05', '1981-04', '1981-03', '1981-02', '1981-01', '1980-12', '1980-11', '1980-10', '1980-09', '1980-08', '1980-07', '1980-06', '1980-05', '1980-04', '1980-03', '1980-02', '1980-01', '1979-12', '1979-11', '1979-10', '1979-09', '1979-08', '1979-07', '1979-06', '1979-05', '1979-04', '1979-03', '1979-02', '1979-01', '1978-12', '1978-11', '1978-10', '1978-09', '1978-08', '1978-07', '1978-06', '1978-05', '1978-04', '1978-03', '1978-02', '1978-01', '1977-12', '1977-11', '1977-10', '1977-09', '1977-08', '1977-07', '1977-06', '1977-05', '1977-04', '1977-03', '1977-02', '1977-01', '1976-12', '1976-11', '1976-10', '1976-09', '1976-08', '1976-07', '1976-06', '1976-05', '1976-04', '1976-03', '1976-02', '1976-01', '1975-12', '1975-11', '1975-10', '1975-09', '1975-08', '1975-07', '1975-06', '1975-05', '1975-04', '1975-03', '1975-02', '1975-01', '1974-12', '1974-11', '1974-10', '1974-09', '1974-08', '1974-07', '1974-06', '1974-05', '1974-04', '1974-03', '1974-02', '1974-01', '1973-12', '1973-11', '1973-10', '1973-09', '1973-08', '1973-07', '1973-06', '1973-05', '1973-04', '1973-03', '1973-02', '1973-01', '1972-12']
        
        values = [88, 91, 91, 93, 92, 88, 90, 94, 95, 92, 91, 90, 91, 90, 91, 89, 91, 89, 89, 85, 85, 86, 87, 86, 84, 83, 81, 82, 82, 82, 84, 83, 81, 83, 80, 82, 85, 87, 89, 97, 98, 99, 98, 100, 103, 99, 103, 105, 99, 97, 96, 92, 93, 96, 89, 94, 95, 94, 93, 95, 89, 91, 103, 105, 104, 102, 106, 105, 105, 103, 103, 102, 100, 99, 98, 97, 94, 89, 92, 96, 95, 97, 97, 97, 100, 103, 102, 101, 105, 107, 104, 101, 102, 104, 105, 109, 103, 102, 102, 103, 102, 101, 101, 100, 99, 97, 97, 98, 100, 96, 96, 97, 99, 98, 98, 98, 99, 95, 94, 95, 95, 96, 95, 94, 91, 91, 89, 87, 87, 87, 87, 87, 86, 86, 88, 86, 87, 86, 85, 88, 87, 86, 83, 80, 81, 84, 83, 85, 85, 86, 84, 84, 85, 87, 89, 93, 94, 91, 90, 85, 84, 83, 84, 87, 85, 86, 90, 88, 88, 87, 87, 90, 90, 91, 95, 92, 91, 90, 88, 87, 89, 90, 92, 93, 96, 95, 95, 92, 92, 91, 90, 91, 88, 87, 85, 85, 85, 84, 84, 83, 86, 84, 83, 83, 87, 90, 91, 91, 91, 96, 96, 101, 102, 105, 108, 110, 110, 103, 103, 102, 101, 100, 101, 101, 101, 99, 100, 97, 97, 98, 99, 100, 98, 97, 94, 94, 94, 95, 96, 96, 96, 99, 99, 100, 99, 101, 102, 103, 104, 102, 100, 101, 101, 103, 101, 100, 101, 100, 100, 100, 101, 101, 101, 102, 102, 100, 98, 103, 105, 109, 109, 109, 108, 109, 110, 113, 114, 110, 112, 111, 112, 112, 112, 111, 111, 113, 114, 115, 116, 121, 123, 124, 126, 124, 120, 120, 119, 122, 124, 123, 123, 123, 120, 119, 119, 120, 122, 121, 120, 118, 116, 115, 114, 113, 114, 116, 115, 113, 114, 116, 117, 116, 115, 111, 112, 109, 110, 106, 104, 108, 107, 108, 108, 107, 106, 107, 99, 100, 99, 101, 100, 99, 97, 96, 95, 94, 95, 95, 96, 97, 98, 98, 97, 94, 98, 99, 102, 106, 110, 113, 112, 109, 109, 109, 109, 111, 110, 111, 111, 109, 108, 107, 107, 105, 104, 103, 103, 101, 100, 98, 97, 96, 96, 96, 96, 105, 101, 100, 100, 102, 103, 104, 102, 102, 102, 102, 104, 104, 103, 103, 102, 101, 102, 102, 102, 102, 102, 103, 104, 104, 108, 102, 102, 105, 104, 105, 103, 108, 112, 112, 109, 111, 113, 113, 115, 114, 112, 112, 111, 111, 112, 110, 110, 111, 111, 112, 113, 112, 114, 112, 112, 112, 112, 112, 112, 108, 109, 109, 109, 108, 105, 106, 105, 103, 102, 102, 101, 103, 102, 102, 102, 106, 105, 107, 106, 106, 106, 106, 111, 109, 109, 109, 108, 106, 105, 104, 103, 102, 101, 100, 100, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 97, 97, 98, 99, 100, 101, 102, 102, 102, 102, 101, 100, 101, 103, 108, 110, 110, 107, 106, 107, 109, 111, 112, 113, 114, 115, 115, 115, 114, 112, 111, 111, 111, 111, 112, 113, 112, 110, 107, 105, 105, 106, 107, 107, 107, 106, 106, 106, 106, 106, 106, 106, 108, 110, 111, 111, 111, 111, 111, 111, 111, 112, 113, 113, 114, 115, 116, 116, 117, 117, 118, 118, 119, 120, 120, 120, 120, 119, 118, 118, 117, 116, 114, 112, 112, 113, 116, 117, 117, 116, 116, 116, 117, 119, 120, 121, 122, 121, 120, 120, 119, 120, 119, 119, 118, 117, 117, 116, 116, 116, 115, 114, 112, 109, 108, 108, 110, 112, 114, 117, 117, 115, 111, 110, 113, 119, 123, 125, 125, 126, 128, 130, 131, 132, 131, 131, 130, 129, 128, 128]
        
        # データフレーム作成
        self.raw_data = pd.DataFrame({
            'period': periods,
            'confidence_index': values
        })
        
    def preprocess_data(self):
        """
        データの前処理と時系列データの構築
        """
        # 日付変換
        self.processed_data = self.raw_data.copy()
        self.processed_data['date'] = pd.to_datetime(self.processed_data['period'])
        
        # 時系列順にソート（古い順）
        self.processed_data = self.processed_data.sort_values('date').reset_index(drop=True)
        
        # 追加の時系列特徴量
        self.processed_data['year'] = self.processed_data['date'].dt.year
        self.processed_data['month'] = self.processed_data['date'].dt.month
        self.processed_data['quarter'] = self.processed_data['date'].dt.quarter
        
        return self.processed_data
    
    def basic_statistics(self):
        """
        基本統計量の計算
        """
        if self.processed_data is None:
            self.preprocess_data()
        
        stats = {
            '平均値': self.processed_data['confidence_index'].mean(),
            '中央値': self.processed_data['confidence_index'].median(),
            '標準偏差': self.processed_data['confidence_index'].std(),
            '最小値': self.processed_data['confidence_index'].min(),
            '最大値': self.processed_data['confidence_index'].max(),
            '第1四分位数': self.processed_data['confidence_index'].quantile(0.25),
            '第3四分位数': self.processed_data['confidence_index'].quantile(0.75),
            'データ期間': f"{self.processed_data['date'].min().strftime('%Y-%m')} から {self.processed_data['date'].max().strftime('%Y-%m')}",
            'データ点数': len(self.processed_data)
        }
        
        return stats
    
    def trend_analysis(self):
        """
        トレンド分析
        """
        if self.processed_data is None:
            self.preprocess_data()
        
        # 移動平均の計算
        self.processed_data['ma_12'] = self.processed_data['confidence_index'].rolling(window=12).mean()
        self.processed_data['ma_24'] = self.processed_data['confidence_index'].rolling(window=24).mean()
        
        # 前年同月比
        self.processed_data['yoy_change'] = self.processed_data['confidence_index'].pct_change(periods=12) * 100
        
        # 前月比
        self.processed_data['mom_change'] = self.processed_data['confidence_index'].pct_change() * 100
        
        return self.processed_data
    
    def crisis_period_analysis(self):
        """
        経済危機期間の分析
        """
        if self.processed_data is None:
            self.preprocess_data()
        
        # 主要な経済危機期間を定義
        crisis_periods = {
            '2008年金融危機': ('2008-01-01', '2009-12-31'),
            'ユーロ危機': ('2010-01-01', '2012-12-31'),
            'COVID-19パンデミック': ('2020-01-01', '2021-12-31'),
            '2022年以降': ('2022-01-01', '2025-05-31')
        }
        
        crisis_stats = {}
        for crisis_name, (start, end) in crisis_periods.items():
            mask = (self.processed_data['date'] >= start) & (self.processed_data['date'] <= end)
            crisis_data = self.processed_data[mask]['confidence_index']
            
            if len(crisis_data) > 0:
                crisis_stats[crisis_name] = {
                    '平均': crisis_data.mean(),
                    '最小値': crisis_data.min(),
                    '最大値': crisis_data.max(),
                    '標準偏差': crisis_data.std(),
                    'データ点数': len(crisis_data)
                }
        
        return crisis_stats
    
    def seasonal_analysis(self):
        """
        季節性分析
        """
        if self.processed_data is None:
            self.preprocess_data()
        
        # 月別統計
        monthly_stats = self.processed_data.groupby('month')['confidence_index'].agg([
            'mean', 'std', 'min', 'max', 'count'
        ]).round(2)
        
        # 四半期別統計
        quarterly_stats = self.processed_data.groupby('quarter')['confidence_index'].agg([
            'mean', 'std', 'min', 'max', 'count'
        ]).round(2)
        
        return monthly_stats, quarterly_stats
    
    def visualize_data(self, figsize=(15, 12)):
        """
        データの可視化
        """
        if self.processed_data is None:
            self.trend_analysis()
        
        fig, axes = plt.subplots(2, 2, figsize=figsize)
        
        # 1. 時系列プロット
        axes[0, 0].plot(self.processed_data['date'], self.processed_data['confidence_index'], 
                       linewidth=1, alpha=0.7, label='信頼感指標', color='blue')
        axes[0, 0].plot(self.processed_data['date'], self.processed_data['ma_12'], 
                       linewidth=2, label='12ヶ月移動平均', color='red')
        axes[0, 0].set_title('フランス家計信頼感指標の推移 (1972-2025)', fontsize=14)
        axes[0, 0].set_ylabel('信頼感指標')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)
        
        # 2. ヒストグラム
        axes[0, 1].hist(self.processed_data['confidence_index'], bins=30, alpha=0.7, edgecolor='black')
        axes[0, 1].axvline(self.processed_data['confidence_index'].mean(), 
                          color='red', linestyle='--', label=f"平均: {self.processed_data['confidence_index'].mean():.1f}")
        axes[0, 1].set_title('信頼感指標の分布', fontsize=14)
        axes[0, 1].set_xlabel('信頼感指標')
        axes[0, 1].set_ylabel('頻度')
        axes[0, 1].legend()
        
        # 3. 前年同月比変化率
        axes[1, 0].plot(self.processed_data['date'], self.processed_data['yoy_change'], color='green')
        axes[1, 0].axhline(y=0, color='red', linestyle='--', alpha=0.5)
        axes[1, 0].set_title('前年同月比変化率 (%)', fontsize=14)
        axes[1, 0].set_ylabel('変化率 (%)')
        axes[1, 0].grid(True, alpha=0.3)
        
        # 4. 月別平均値
        monthly_avg = self.processed_data.groupby('month')['confidence_index'].mean()
        axes[1, 1].bar(monthly_avg.index, monthly_avg.values, alpha=0.7, color='orange')
        axes[1, 1].set_title('月別平均信頼感指標', fontsize=14)
        axes[1, 1].set_xlabel('月')
        axes[1, 1].set_ylabel('平均信頼感指標')
        axes[1, 1].set_xticks(range(1, 13))
        
        plt.tight_layout()
        plt.show()
        
        return fig
    
    def recent_trend_analysis(self, years=5):
        """
        直近の傾向分析
        """
        if self.processed_data is None:
            self.preprocess_data()
        
        # 直近データの抽出
        cutoff_date = self.processed_data['date'].max() - pd.DateOffset(years=years)
        recent_data = self.processed_data[self.processed_data['date'] >= cutoff_date].copy()
        
        # 直近の統計
        recent_stats = {
            '期間': f"{recent_data['date'].min().strftime('%Y-%m')} から {recent_data['date'].max().strftime('%Y-%m')}",
            '平均値': recent_data['confidence_index'].mean(),
            '最新値': recent_data['confidence_index'].iloc[-1],
            '最高値': recent_data['confidence_index'].max(),
            '最低値': recent_data['confidence_index'].min(),
            '標準偏差': recent_data['confidence_index'].std(),
            '直近3ヶ月平均': recent_data['confidence_index'].tail(3).mean()
        }
        
        return recent_stats, recent_data
    
    def generate_report(self):
        """
        分析レポートの生成
        """
        print("=" * 60)
        print("フランス家計信頼感指標 分析レポート")
        print("=" * 60)
        
        # 基本統計
        basic_stats = self.basic_statistics()
        print("\n【基本統計量】")
        for key, value in basic_stats.items():
            if isinstance(value, float):
                print(f"{key}: {value:.2f}")
            else:
                print(f"{key}: {value}")
        
        # 危機期間分析
        crisis_stats = self.crisis_period_analysis()
        print("\n【経済危機期間別分析】")
        for crisis, stats in crisis_stats.items():
            print(f"\n{crisis}:")
            for stat_name, stat_value in stats.items():
                if isinstance(stat_value, float):
                    print(f"  {stat_name}: {stat_value:.2f}")
                else:
                    print(f"  {stat_name}: {stat_value}")
        
        # 直近傾向
        recent_stats, _ = self.recent_trend_analysis()
        print("\n【直近5年間の傾向】")
        for key, value in recent_stats.items():
            if isinstance(value, float):
                print(f"{key}: {value:.2f}")
            else:
                print(f"{key}: {value}")
        
        # 季節性分析
        monthly_stats, quarterly_stats = self.seasonal_analysis()
        print("\n【季節性分析 - 月別平均】")
        print("月\t平均\t標準偏差")
        for month, stats in monthly_stats.iterrows():
            print(f"{month}月\t{stats['mean']:.1f}\t{stats['std']:.1f}")

# 使用例
if __name__ == "__main__":
    # 分析器の初期化（ファイルパス不要）
    analyzer = FrenchConsumerConfidenceAnalyzer()
    
    # データの前処理
    data = analyzer.preprocess_data()
    
    # 分析レポートの生成
    analyzer.generate_report()
    
    # 可視化
    analyzer.visualize_data()
    
    # トレンド分析データの取得
    trend_data = analyzer.trend_analysis()
    
    # 直近の詳細分析
    recent_stats, recent_data = analyzer.recent_trend_analysis(years=3)
    
    print("\n【直近12ヶ月の詳細】")
    print(recent_data[['period', 'confidence_index', 'mom_change']].tail(12))

